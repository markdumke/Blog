<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
  <title>Package on markusdumke</title>
  <link>/categories/package/</link>
  <description>Recent content in Package on markusdumke</description>
  <generator>Hugo -- gohugo.io</generator>
<language>en-us</language>
<lastBuildDate>Thu, 03 Jan 2019 00:00:00 +0000</lastBuildDate>

<atom:link href="/categories/package/index.xml" rel="self" type="application/rss+xml" />


<item>
  <title>Make matplotlib look like ggplot</title>
  <link>/articles/2019/01/vdiffr-0-3-0/</link>
  <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
  
<guid>/articles/2019/01/vdiffr-0-3-0/</guid>
  <description>


&lt;p&gt;This is a fun post, where I wanted to try to make a matplotlib figure similar to a ggplot figure. Can you guess which image was created with matplotlib and which with ggplot? The answer can be found &lt;a href=&#34;#exactline&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
&lt;center&gt;
&lt;img src = &#34;iris_r.png&#34; width = &#34;400px&#34; hspace=&#34;50&#34;&gt; &lt;img src = &#34;iris_matplotlib.png&#34; width = &#34;400px&#34;&gt;
&lt;figcaption&gt;
Two plots, one generated with matplotlib, one with ggplot.
&lt;/figcaption&gt;
&lt;/center&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;To make the matplotlib similar to the ggplot you can pass on a style argument. There is a &lt;code&gt;ggplot&lt;/code&gt; style already available but I personally prefer the white background as in ggplotâ€™s &lt;code&gt;theme_bw&lt;/code&gt;. So I adapted the mplstyle file and put it on &lt;a href=&#34;https://gist.github.com/markusdumke/572e2a8546c54b322b48c0c792799b77&#34;&gt;Gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to use this style download the file and specify in Python the path to this file, e.g.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import matplotlib.pyplot as plt
theme_bw = &amp;quot;path2file/theme_bw.mplstyle&amp;quot;
plt.style.use(theme_bw)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also put the &lt;code&gt;theme_bw.mplstyle&lt;/code&gt; into your matplotlib folder (Python -&amp;gt; Lib -&amp;gt; site-packages -&amp;gt; matplotlib -&amp;gt; mpl-data -&amp;gt; stylelib), then you can load the style more easily with&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;plt.style.use(&amp;quot;theme_bw&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the full code to generate the two figures above. I had to make a few tweaks to make them as similar as possible.&lt;/p&gt;
&lt;p&gt;In R with ggplot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
# Define colors
cols &amp;lt;- c(&amp;quot;setosa&amp;quot; = &amp;quot;#E24A33&amp;quot;, &amp;quot;virginica&amp;quot; = &amp;quot;#348ABD&amp;quot;, &amp;quot;versicolor&amp;quot; = &amp;quot;#FBC15E&amp;quot;)
g &amp;lt;- ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, col = factor(Species))) +
  geom_point(size = 3) +
  theme_bw() +
  xlab(&amp;quot;Sepal Length&amp;quot;) +
  ylab(&amp;quot;Sepal Width&amp;quot;) +
  ggtitle(&amp;quot;Iris&amp;quot;) +
  scale_colour_manual(values = cols) +
  guides(col = guide_legend(title = &amp;quot;Species&amp;quot;)) +
  theme(legend.title.align = 0.5,
    legend.background = element_rect(colour = &amp;#39;lightgrey&amp;#39;, linetype = &amp;#39;solid&amp;#39;))
g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in Python with matplotlib:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets
# Load the theme_bw matplotlib theme
theme_bw = &amp;quot;path2file/theme_bw.mplstyle&amp;quot;
plt.style.use(theme_bw)
# Load the famous iris data
iris = datasets.load_iris()
# Convert to pandas data frame and rename columns
df = pd.DataFrame(data = np.c_[iris[&amp;#39;data&amp;#39;], iris[&amp;#39;target&amp;#39;]],
                     columns = iris[&amp;#39;feature_names&amp;#39;] + [&amp;#39;target&amp;#39;])
df.rename(columns = {&amp;#39;sepal length (cm)&amp;#39;: &amp;#39;sepal_length&amp;#39;, 
                     &amp;#39;sepal width (cm)&amp;#39;: &amp;#39;sepal_width&amp;#39;,
                     &amp;quot;petal length (cm)&amp;quot;: &amp;quot;petal_length&amp;quot;,
                     &amp;quot;petal width (cm)&amp;quot;: &amp;quot;petal_width&amp;quot;,
                     &amp;quot;target&amp;quot;: &amp;quot;species&amp;quot;}, inplace=True)
# Specify colors
col = [&amp;quot;#E24A33&amp;quot;, &amp;quot;#FBC15E&amp;quot;, &amp;quot;#348ABD&amp;quot;]
species = [&amp;quot;setosa&amp;quot;, &amp;quot;versicolor&amp;quot;, &amp;quot;virginica&amp;quot;]
# Plot
fig = plt.figure(figsize = (9, 7.2), dpi = 50)
ax = plt.subplot(111)
# A few tweaks to save the image in the same aspect ratio as the R graphic
fig.subplots_adjust(top = 0.8,
                    bottom = 0.1,
                    left = 0.1,
                    right = 0.9)
# Add plot for each species
for i in np.unique(df[&amp;quot;species&amp;quot;]):
    ax.plot(df[df[&amp;quot;species&amp;quot;] == i][&amp;quot;sepal_length&amp;quot;], 
            df[df[&amp;quot;species&amp;quot;] == i][&amp;quot;sepal_width&amp;quot;], &amp;quot;o&amp;quot;, markersize = 8,
            c = col[int(i)], label = species[int(i)])
plt.ylabel(&amp;quot;Sepal Width&amp;quot;)
plt.xlabel(&amp;quot;Sepal Length&amp;quot;)
plt.title(&amp;quot;Iris&amp;quot;, loc = &amp;quot;left&amp;quot;)
# Add space for legend on the right
box = ax.get_position()
ax.set_position([box.x0, box.y0, box.width * 0.75, box.height])
# Add legend
ax.legend(bbox_to_anchor = (1, 0.6), title = &amp;quot;Species&amp;quot;, labelspacing = 1.5)
# Remove minor ticks on x axis
plt.xticks(np.arange(5, max(df.sepal_length) + 1, 1.0))
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a name=&#34;exactline&#34;&gt;&lt;/a&gt; To answer the initial question: The left plot above has been created with ggplot in R, the right plot with matplotlib in Python.&lt;/p&gt;
</description>
  </item>
  
</channel>
  </rss>
