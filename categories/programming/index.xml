<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
  <title>Programming on markusdumke</title>
  <link>/categories/programming/</link>
  <description>Recent content in Programming on markusdumke</description>
  <generator>Hugo -- gohugo.io</generator>
<language>en-us</language>
<lastBuildDate>Tue, 12 Dec 2017 00:00:00 +0000</lastBuildDate>

<atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml" />


<item>
  <title>Project-oriented workflow</title>
  <link>/articles/2017/12/workflow-vs-script/</link>
  <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
  
<guid>/articles/2017/12/workflow-vs-script/</guid>
  <description>


&lt;p&gt;I was honored to speak this week at the &lt;a href=&#34;http://www.nzsa2017.com&#34;&gt;IASC-ARS/NZSA Conference&lt;/a&gt;, hosted by the Stats Department at The University of Auckland. One of the conference themes is to celebrate the accomplishments of Ross Ihaka, who got R started back in 1992, along with Robert Gentleman. My talk included advice on setting up your R life to maximize effectiveness and reduce frustration.&lt;/p&gt;
&lt;p&gt;Two specific slides generated &lt;a href=&#34;https://twitter.com/hadleywickham/status/940021008764846080&#34;&gt;much discussion and consternation in #rstats Twitter&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the first line of your R script is&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setwd(&amp;quot;C:\Users\jenny\path\that\only\I\have&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I will come into your office and
SET YOUR COMPUTER ON FIRE üî•.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If the first line of your R script is&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rm(list = ls())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I will come into your office and
SET YOUR COMPUTER ON FIRE üî•.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I stand by these strong opinions, but on their own, threats to commit
arson aren‚Äôt terribly helpful! Here I explain &lt;em&gt;why&lt;/em&gt; these habits can
be harmful and may be indicative of an awkward workflow. Feel free to
discuss more on
&lt;a href=&#34;https://community.rstudio.com/t/project-oriented-workflow-setwd-rm-list-ls-and-computer-fires/3549&#34;&gt;community.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Caveat: only you can decide how much you care about this. The importance of these practices has a lot to do with whether your code will be run by other people, on other machines, and in the future. If your current practices serve your purposes, then go forth and be happy.&lt;/p&gt;
&lt;div id=&#34;workflow-versus-product&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Workflow versus Product&lt;/h2&gt;
&lt;p&gt;Let‚Äôs make a distinction between things you do because of personal taste and habits (‚Äúworkflow‚Äù) versus the logic and output that is the essence of your project (‚Äúproduct‚Äù). These are part of your workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The editor you use to write your R code.&lt;/li&gt;
&lt;li&gt;The name of your home directory.&lt;/li&gt;
&lt;li&gt;The R code you ran before lunch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I consider these to be clearly product:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The raw data.&lt;/li&gt;
&lt;li&gt;The R code someone needs to run on your raw data to get your results, including the explicit &lt;code&gt;library()&lt;/code&gt; calls to load necessary packages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ideally, you don‚Äôt hardwire anything about your workflow into your product. Workflow-related operations should be executed by you interactively, using whatever means is appropriate to your setup, but not built into the scripts themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;self-contained-projects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Self-contained projects&lt;/h2&gt;
&lt;p&gt;I suggest organizing each data analysis into a &lt;em&gt;project&lt;/em&gt;: a folder on your computer that holds all the files relevant to that particular piece of work. I‚Äôm &lt;strong&gt;not&lt;/strong&gt; assuming this is an &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects&#34;&gt;RStudio Project&lt;/a&gt;, though this is a nice implementation discussed below.&lt;/p&gt;
&lt;p&gt;Any resident R script is written assuming that it will be run from a fresh R process with working directory set to the project directory. It creates everything it needs, in its own workspace or folder, and it touches nothing it did not create. For example, it does not install additional packages (another pet peeve of mine).&lt;/p&gt;
&lt;p&gt;This convention guarantees that the project can be moved around on your computer or onto other computers and will still ‚Äújust work‚Äù. I argue that this is the only practical convention that creates reliable, polite behavior across different computers or users and over time. This convention is neither new, nor unique to R.&lt;/p&gt;
&lt;p&gt;It‚Äôs like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;use-of-a-development-environment&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Use of a development environment&lt;/h2&gt;
&lt;p&gt;You will notice that the workflow recommendations given here are
easier to implement if you use an IDE (&lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34;&gt;integrated development
environment&lt;/a&gt;). &lt;a href=&#34;https://www.rstudio.com/products/rstudio-desktop/&#34;&gt;RStudio&lt;/a&gt;
is a great example (what I use today), but there are many others, including: &lt;a href=&#34;https://ess.r-project.org&#34;&gt;Emacs + ESS&lt;/a&gt; (what I used for ~15 years before RStudio), &lt;a href=&#34;https://medium.com/@kadek/turning-vim-into-an-r-ide-cd9602e8c217&#34;&gt;vim + Nvim-R&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/rtvs/&#34;&gt;Visual Studio + RTVS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Direction of causality: long-time coders don‚Äôt organize their work into self-contained projects and use relative paths &lt;em&gt;because&lt;/em&gt; they use an IDE. They use an IDE &lt;em&gt;because&lt;/em&gt; it makes it easier to follow standard practices, such as these.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;whats-wrong-with-setwd&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What‚Äôs wrong with &lt;code&gt;setwd()&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;I run a lot of student code in &lt;a href=&#34;http://stat545.com&#34;&gt;STAT 545&lt;/a&gt; and, at the start, I see a lot of R scripts that look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
setwd(&amp;quot;/Users/jenny/cuddly_broccoli/verbose_funicular/foofy/data&amp;quot;)
df &amp;lt;- read.delim(&amp;quot;raw_foofy_data.csv&amp;quot;)
p &amp;lt;- ggplot(df, aes(x, y)) + geom_point()
ggsave(&amp;quot;../figs/foofy_scatterplot.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The chance of the &lt;code&gt;setwd()&lt;/code&gt; command having the desired effect ‚Äì making the file paths work ‚Äì for anyone besides its author is 0%. It‚Äôs also unlikely to work for the author one or two years or computers from now. The project is not self-contained and portable. To recreate and perhaps extend this plot, the lucky recipient will need to hand edit one or more paths to reflect where the project has landed on their machine. When you do this for the 73rd time in 2 days, while marking an assignment, you start to fantasize about lighting the perpetrator‚Äôs computer on fire.&lt;/p&gt;
&lt;p&gt;This use of &lt;code&gt;setwd()&lt;/code&gt; is also highly suggestive that the useR does all of their work in one R process and manually switches gears when they shift from one project to another. That sort of workflow makes it unpleasant to work on more than one project at a time and also makes it easy for work done on one project to accidentally leak into subsequent work on another (e.g., objects, loaded packages, session options).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;use-projects-and-the-here-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Use projects and the &lt;a href=&#34;https://CRAN.R-project.org/package=here&#34;&gt;here package&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;How can you avoid &lt;code&gt;setwd()&lt;/code&gt; at the top of every script?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Organize each logical project into a folder on your computer.&lt;/li&gt;
&lt;li&gt;Make sure the top-level folder advertises itself as such. This can be as simple as having an empty file named &lt;code&gt;.here&lt;/code&gt;. Or, if you use RStudio and/or Git, those both leave characteristic files behind that will get the job done.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;here()&lt;/code&gt; function from the &lt;a href=&#34;https://CRAN.R-project.org/package=here&#34;&gt;here package&lt;/a&gt; to build the path when you read or write a file. Create paths relative to the top-level directory.&lt;/li&gt;
&lt;li&gt;Whenever you work on this project, launch the R process from the project‚Äôs top-level directory. If you launch R from the shell, &lt;code&gt;cd&lt;/code&gt; to the correct folder first.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To continue our example, start R in the &lt;code&gt;foofy&lt;/code&gt; directory, wherever that may be. Now the code looks like so:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(here)

df &amp;lt;- read.delim(here(&amp;quot;data&amp;quot;, &amp;quot;raw_foofy_data.csv&amp;quot;))
p &amp;lt;- ggplot(df, aes(x, y)) + geom_point()
ggsave(here(&amp;quot;figs&amp;quot;, &amp;quot;foofy_scatterplot.png&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will run, with no edits, for anyone who follows the convention about launching R in the project folder. In fact, it will even work if R‚Äôs working directory is anywhere inside the project, i.e.¬†it will work from sub-folders. This plays well with knitr/rmarkdown‚Äôs default behavior around working directory and in package development/checking workflows.&lt;/p&gt;
&lt;p&gt;Read up on the &lt;a href=&#34;https://CRAN.R-project.org/package=here&#34;&gt;here package&lt;/a&gt; to learn
about more features, such as additional ways to mark the top directory and
troubleshooting with &lt;code&gt;dr_here()&lt;/code&gt;. I have also written a &lt;a href=&#34;https://github.com/jennybc/here_here&#34;&gt;more detailed
paean&lt;/a&gt; to this package before.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rstudio-projects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;RStudio Projects&lt;/h2&gt;
&lt;p&gt;This work style is so crucial that RStudio has an official notion of a &lt;a href=&#34;https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects&#34;&gt;Project&lt;/a&gt; (with a capital ‚ÄúP‚Äù). You can designate a new or existing folder as a Project. All this means is that RStudio leaves a file, e.g., &lt;code&gt;foofy.Rproj&lt;/code&gt;, in the folder, which is used to store settings specific to that project.&lt;/p&gt;
&lt;p&gt;Double-click on a &lt;code&gt;.Rproj&lt;/code&gt; file to open a fresh instance of RStudio, with the working directory and file browser pointed at the project folder. The here package is aware of this and the presence of an &lt;code&gt;.Rproj&lt;/code&gt; is one of the ways it recognizes the top-level folder for a project.&lt;/p&gt;
&lt;p&gt;RStudio fully supports Project-based workflows, making it easy to switch from one to another, have many projects open at once, re-launch recently used Projects, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;whats-wrong-with-rmlist-ls&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What‚Äôs wrong with &lt;code&gt;rm(list = ls())&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;It‚Äôs also fairly common to see data analysis scripts that begin with this object-nuking command:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(list = ls())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like hard-wiring the working directory, this is highly suggestive that
the useR works in one R process and manually switches gears when they shift from
one project to another. That, in turn, suggests that development frequently
happens in a long-running R process that has been used vs.¬†fresh and clean.&lt;/p&gt;
&lt;p&gt;The problem is that &lt;code&gt;rm(list = ls())&lt;/code&gt; does NOT, in fact, create a fresh R process. All it does is delete user-created objects from the global workspace.&lt;/p&gt;
&lt;p&gt;Many other changes to the R landscape persist invisibly and can have profound effects on subsequent development. Any packages that have been loaded are still available. Any options that have been set to non-default values remain that way. Working directory is not affected (which is, of course, why we see &lt;code&gt;setwd()&lt;/code&gt; so often here too!).&lt;/p&gt;
&lt;p&gt;Why does this matter? It makes your script vulnerable to hidden dependencies on things you ran in this R process before you executed &lt;code&gt;rm(list = ls())&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You might use functions from a package without including the necessary &lt;code&gt;library()&lt;/code&gt; call. Your collaborator won‚Äôt be able to run this script.&lt;/li&gt;
&lt;li&gt;You might code up an analysis assuming that &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt; but next week, when you have restarted R, everything will inexplicably be broken.&lt;/li&gt;
&lt;li&gt;You might write paths relative to some random working directory, then be puzzled next month when nothing can be found or results don‚Äôt appear where you expect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The solution is to write every script assuming it will be run in a fresh R process. How do you adopt this style? Key steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User-level setup: Do not save &lt;code&gt;.RData&lt;/code&gt; when you quit R and don‚Äôt load &lt;code&gt;.RData&lt;/code&gt; when you fire up R.
&lt;ul&gt;
&lt;li&gt;In RStudio, this behavior can be requested in the General tab of Preferences.&lt;/li&gt;
&lt;li&gt;If you run R from the shell, put something like this in your &lt;code&gt;.bash_profile&lt;/code&gt;: &lt;code&gt;alias R=&#39;R --no-save --no-restore-data&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Don‚Äôt do things in your &lt;code&gt;.Rprofile&lt;/code&gt; that affect how R code runs, such as loading a package like dplyr or ggplot or setting an option such as &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Daily work habit: Restart R very often and re-run your under-development script from the top.
&lt;ul&gt;
&lt;li&gt;If you use RStudio, use the menu item &lt;em&gt;Session &amp;gt; Restart
R&lt;/em&gt; or the associated keyboard shortcut Ctrl+Shift+F10 (Windows and
Linux) or Command+Shift+F10 (Mac OS). You can re-run all code up to
the current line with Ctrl+Alt+B (Windows and Linux) or
Command+Option+B (Mac OS).&lt;/li&gt;
&lt;li&gt;If you run R from the shell, use Ctrl+D to quit, then &lt;code&gt;R&lt;/code&gt; to restart.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This requires that you fully embrace the idea that &lt;strong&gt;source is real&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The source code is real. The objects are realizations of the source code. Source for EVERY user modified object is placed in a particular directory or directories, for later editing and retrieval.
‚Äì from the &lt;a href=&#34;https://ess.r-project.org/Manual/ess.html#Philosophies-for-using-ESS_0028S_0029&#34;&gt;ESS manual&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This doesn‚Äôt mean that your scripts need to be perfectly polished and ready to
run unattended on a remote server. Scripts can be messy, anticipating
interactive execution, but still be &lt;em&gt;complete&lt;/em&gt;. Clean them up when and if you
need to.&lt;/p&gt;
&lt;p&gt;What about objects that take a long time to create? Isolate that bit in its own
script and write the precious object to file with &lt;code&gt;saveRDS(my_precious, here(&amp;quot;results&amp;quot;, &amp;quot;my_precious.rds&amp;quot;))&lt;/code&gt;. Now you can develop scripts to do
downstream work that reload the precious object via &lt;code&gt;my_precious &amp;lt;- readRDS(here(&amp;quot;results&amp;quot;, &amp;quot;my_precious.rds&amp;quot;))&lt;/code&gt;. It is a good idea to break data
analysis into logical, isolated pieces anyway.&lt;/p&gt;
&lt;p&gt;Lastly, &lt;code&gt;rm(list = ls())&lt;/code&gt; is hostile to anyone that you ask to help you with your R problems. If they take a short break from their own work to help debug your code, their generosity is rewarded by losing all of their previous work. Now granted, if your helper has bought into all the practices recommended here, this is easy to recover from, but it‚Äôs still irritating. When this happens for the 100th time in a semester, it rekindles the computer arson fantasies triggered by last week‚Äôs fiascos with &lt;code&gt;setwd()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
  </item>
  
<item>
  <title>Contributing code to the tidyverse</title>
  <link>/articles/2017/08/contributing/</link>
  <pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate>
  
<guid>/articles/2017/08/contributing/</guid>
  <description>

&lt;blockquote&gt;
&lt;p&gt;This post originally appeared at &lt;a href=&#34;http://www.jimhester.com/2017/08/08/contributing/&#34;&gt;http://www.jimhester.com/2017/08/08/contributing/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Contributing code to open source projects can be intimidating. These projects
are often widely used and have well known maintainers. Contributing code and
having it accepted seems an almost insurmountable task.&lt;/p&gt;

&lt;p&gt;However if you follow a few simple strategies you can have your code accepted
into even the most popular projects in the &lt;a href=&#34;https://tidyverse.org&#34;&gt;tidyverse&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;don-t-contribute-code&#34;&gt;Don&amp;rsquo;t contribute code&lt;/h3&gt;

&lt;p&gt;The easiest way to contribute to an open source package is not to contribute
code at all. Find a typo in the documentation, add a reproducible
example to an open issue without one, post a solution to a question in an
 issue, on &lt;a href=&#34;https://twitter.com/search?q=%23rstats&#34;&gt;twitter&lt;/a&gt; or
&lt;a href=&#34;https://stackoverflow.com/questions/tagged/r&#34;&gt;stackoverflow&lt;/a&gt;. These types of
contributions are among the easiest things for maintainers to review and
accept, so it is a great place to start getting used to the contribution
process.&lt;/p&gt;

&lt;h3 id=&#34;read-contributing-md&#34;&gt;Read CONTRIBUTING.md&lt;/h3&gt;

&lt;p&gt;Often projects will have a &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; document that has instructions for
contributing to the project. These are guidelines the maintainers would like
contributors to adhere to and exist to make the process flow more smoothly. As a
contributor you should try to make accepting your code as easy as you
can, this greatly increases the chance your contribution will be accepted.
These files are not currently widespread in the tidyverse, but it&amp;rsquo;s something
we will be working on in the future!&lt;/p&gt;

&lt;h3 id=&#34;explore-previously-merged-contributions&#34;&gt;Explore previously merged contributions&lt;/h3&gt;

&lt;p&gt;Next you should read a few previously merged pull requests for additional
context. If a project does not have a &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; (or similar)
document this is your best source of information on expected practices for
contributions.&lt;/p&gt;

&lt;p&gt;Things you should look for include how are the commit messages formatted? Are
any additional files changed apart from the code changes (such as NEWS
updates)? Do the contributions all include additional test cases? Do internal
only changes need documentation?&lt;/p&gt;

&lt;p&gt;Some Common tidyverse conventions are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a bullet to &lt;code&gt;NEWS.md&lt;/code&gt; for each change referencing the issue number and your GitHub username.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;Closes #123&lt;/code&gt; at the end of your commit message to automatically close the issue with the PR is merged.&lt;/li&gt;
&lt;li&gt;Document functions with &lt;a href=&#34;https://github.com/klutometis/roxygen&#34;&gt;roxygen&lt;/a&gt; and be sure to run &lt;code&gt;devtools::document()&lt;/code&gt; before submitting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read the reviewer comments in the pull request
to get an idea of what in particular reviewers are looking for. Do they require
certain &lt;a href=&#34;http://style.tidyverse.org&#34;&gt;code style&lt;/a&gt;, variable names or code
organization? Are there common requests such as adding a note to the NEWS
commonly forgotten? If you can handle these things &lt;em&gt;before&lt;/em&gt; the reviewer even
sees your code is greatly reduces the friction in merging your changes.&lt;/p&gt;

&lt;h3 id=&#34;make-your-changes-as-small-as-possible&#34;&gt;Make your changes as &lt;em&gt;small&lt;/em&gt; as possible&lt;/h3&gt;

&lt;p&gt;One of the most common mistakes contributors make is to add a complicated new
feature as their first contribution.&lt;/p&gt;

&lt;p&gt;Accepting code as a maintainer means you
have to &lt;em&gt;maintain&lt;/em&gt; that code in the future, fixing bugs, updating
documentation, refactoring it as the rest of the code evolves. This means the
maintainer need to fully understand any code they accept.&lt;/p&gt;

&lt;p&gt;What this means for contributors is they should strive to make their
contribution as simple to understand as possible. The best way to do this is to
make the contribution as short and clear as possible, changing as little of the
existing code as you can. First time contributions is not the time to do major
restructuring or reformatting of existing code. The best way to check exactly
what changes you are proposing is to use &lt;code&gt;git diff&lt;/code&gt; &lt;em&gt;prior&lt;/em&gt; to submitting your
contribution. This will ensure it contains only the changes necessary for the
new functionality.&lt;/p&gt;

&lt;h3 id=&#34;include-tests&#34;&gt;Include tests&lt;/h3&gt;

&lt;p&gt;Contributions with test cases are easier to accept because the tests ensure the
code does what it intends to do and nothing else. Without tests the maintainer
needs to check the new functionality by hand, a burden you can lessen or remove
by including tests. If you are not sure what parts of your code is covered by
tests &lt;a href=&#34;https://cran.r-project.org/package=covr&#34;&gt;covr&lt;/a&gt; is a great tool to use
before submission. Just run the following to get a local coverage report of the
package so you can see exactly what lines are not covered in the project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&amp;quot;covr&amp;quot;)
co &amp;lt;- covr::package_coverage()
covr::report(co)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition adding tests to parts of the code base that is not currently
covered is a great way to contribute to a project.&lt;/p&gt;

&lt;h3 id=&#34;follow-the-style&#34;&gt;Follow the style&lt;/h3&gt;

&lt;p&gt;One of the first barriers to acceptance is coding style. Do not submit a
contribution using camelCase to a project that uses snake_case, or use tabs
when the project uses spaces. For tidyverse projects read the &lt;a href=&#34;http://style.tidyverse.org&#34;&gt;Style
Guide&lt;/a&gt; and use the
&lt;a href=&#34;https://cran.r-project.org/package=lintr&#34;&gt;lintr&lt;/a&gt; package to find code which
does not adhere to the style guide.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&amp;quot;lintr&amp;quot;)
lintr::lint_package()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to include style changes only in code you are contributing. If you
want to fix style overall in the package that is a great idea, but it should be
in a separate pull request!&lt;/p&gt;

&lt;h3 id=&#34;contribute-to-active-projects&#34;&gt;Contribute to active projects&lt;/h3&gt;

&lt;p&gt;Development of tidyverse projects typically progresses in waves. We work
intensely on a certain project for a period of time, then let it lie fallow for
awhile and work on other things. Because of this contributions to projects
which are not being actively developed may not be addressed for a long length
of time. This does not mean the contribution is not appreciated, but it does
mean you have to be patient and when it is reviewed be prompt with a response.&lt;/p&gt;

&lt;p&gt;You can avoid these lengthy wait times by contributing to projects being
actively developed. Look at the GitHub contributions of members of the
tidyverse and times of recent commits of projects to see which are active and
which are fallow.&lt;/p&gt;

&lt;h3 id=&#34;be-attentive-not-pushy&#34;&gt;Be attentive, not pushy&lt;/h3&gt;

&lt;p&gt;When a maintainer does review a contribution, try to address the comments in
short order, your changes are much more likely to be accepted if they
are addressed in the next day than the next month. In addition occasional
comments bumping the issue can be useful if changes have been made, but do not
repeatably &amp;lsquo;ping&amp;rsquo; an issue because you feel it is been opened too long without
acceptance.&lt;/p&gt;

&lt;p&gt;If you absolutely need a feature from a development package an option is to
install your personal fork with the features included, or even install the
package directly from the pull request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&amp;quot;devtools&amp;quot;)

# install from personal fork
devtools::install(&amp;quot;/path/to/pkg&amp;quot;)

# install from a pull request #123
devtools::install_github(&amp;quot;tidyverse/glue#123&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;view-contributing-as-a-relationship-not-a-transaction&#34;&gt;View contributing as a relationship, not a transaction&lt;/h3&gt;

&lt;p&gt;The best way to be successful contributing to open source projects is to do so
repeatedly. This means cultivating trust between yourself and the maintainer by
multiple successful contributions. After a series of smaller contributions the
maintainer will be much more willing to review and accept more substantial
changes. As with any relationship being polite and considerate throughout will
go a long way to improve trust. If you instead view the contribution as a
solitary transaction to add your pet feature you are much less likely to be
successful.&lt;/p&gt;

&lt;h3 id=&#34;contribute&#34;&gt;Contribute!&lt;/h3&gt;

&lt;p&gt;Contributing to open source software will make you a better programmer, gain
valuable feedback through code review, look great on your resume and increase
your visibility in the community. It may even get you a job; I am on the
tidyverse team today mainly because I was a frequent open source contributor to
tidyverse packages over a number of years.&lt;/p&gt;
</description>
  </item>
  
</channel>
  </rss>
