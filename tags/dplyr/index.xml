<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
  <title>Dplyr on markusdumke</title>
  <link>/tags/dplyr/</link>
  <description>Recent content in Dplyr on markusdumke</description>
  <generator>Hugo -- gohugo.io</generator>
<language>en-us</language>
<lastBuildDate>Mon, 03 Dec 2018 00:00:00 +0000</lastBuildDate>

<atom:link href="/tags/dplyr/index.xml" rel="self" type="application/rss+xml" />


<item>
  <title>dplyr 0.8.0 release candidate</title>
  <link>/articles/2018/12/dplyr-0-8-0-release-candidate/</link>
  <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
  
<guid>/articles/2018/12/dplyr-0-8-0-release-candidate/</guid>
  <description>

&lt;style&gt;
blockquote {
  margin: 10px 0px 10px 0px;
  padding: 10px 10px 0px 10px;
  border: 2px solid red;
  background: rgb(248, 248, 248);
  font-size: 100%;
  font-style: inherit;
  font-weight: inherit;
}
&lt;/style&gt;

&lt;blockquote&gt;
&lt;p&gt;This post, published in early December 2018 and promoted on Twitter
generated valuable discussions that led us to reconsider some
design choices for &lt;code&gt;dplyr&lt;/code&gt; 0.8.0&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve left the original post unchanged, with addenda when
changes have been made.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A new release of dplyr (0.8.0) is on the horizon, &lt;del&gt;roughly planned for early January&lt;/del&gt; planned
for February 1st.&lt;/p&gt;

&lt;p&gt;Since it is a major release with some potential
disruption, we&amp;rsquo;d love for the community to try it out, give us some feedback,
and &lt;a href=&#34;https://github.com/tidyverse/dplyr/issues&#34;&gt;report issues&lt;/a&gt;
before we submit to CRAN. This version represents about nine months of development, making dplyr more
respectful of factors, and less surprising in its evaluation of expressions.&lt;/p&gt;

&lt;p&gt;In this post, we&amp;rsquo;ll highlight the major changes. Please see the
&lt;a href=&#34;https://github.com/tidyverse/dplyr/blob/master/NEWS.md&#34;&gt;NEWS&lt;/a&gt; for a more
detailed description of changes. Our formalised process for this release is captured
in &lt;a href=&#34;https://github.com/tidyverse/dplyr/issues/3931&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;tidyverse/dplyr@rc_0.8.0&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If needed, you can restore the &lt;a href=&#34;https://CRAN.R-project.org/package=dplyr&#34;&gt;release version&lt;/a&gt; by installing from CRAN:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;dplyr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;new-grouping-algorithm&#34;&gt;New grouping algorithm&lt;/h1&gt;

&lt;h2 id=&#34;group-creation&#34;&gt;Group creation&lt;/h2&gt;

&lt;p&gt;The algorithm behind &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_by.html&#34;&gt;&lt;code&gt;group_by()&lt;/code&gt;&lt;/a&gt; has been redesigned to better respect factor levels,
so that a group is created for each level of the factor, even if there is no data. This
differs from previous versions of dplyr where groups were only created to
match the observed data. This closes the epic issue &lt;a href=&#34;https://github.com/tidyverse/dplyr/issues/341&#34;&gt;341&lt;/a&gt;, which dates back to 2014, and has generated
a lot of press and frustration, see &lt;a href=&#34;https://kieranhealy.org/blog/archives/2018/11/19/zero-counts-in-dplyr/&#34;&gt;Zero Counts in dplyr&lt;/a&gt;
for a recent walkthrough of the issue.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s illustrate the new algorithm with the &lt;a href=&#34;https://dplyr.tidyverse.org/reference/count.html&#34;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- tibble(
  f1 = factor(c(&amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;b&amp;quot;), levels = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;)), 
  f2 = factor(c(&amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;f&amp;quot;), levels = c(&amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;f&amp;quot;)), 
  x  = c(1, 1, 1, 2, 2), 
  y  = 1:5
)
df
#&amp;gt; # A tibble: 5 x 4
#&amp;gt;   f1    f2        x     y
#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1 a     d         1     1
#&amp;gt; 2 a     e         1     2
#&amp;gt; 3 a     d         1     3
#&amp;gt; 4 b     e         2     4
#&amp;gt; 5 b     f         2     5
df %&amp;gt;% 
  count(f1)
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;   f1        n
#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1 a         3
#&amp;gt; 2 b         2
#&amp;gt; 3 c         0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where previous versions of &lt;code&gt;dplyr&lt;/code&gt; would have created only two groups (for levels &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;),
it now creates one group per level, and the group related to the level &lt;code&gt;c&lt;/code&gt; just happens to be
empty.&lt;/p&gt;

&lt;p&gt;Groups are still made to match the data on other types of columns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% 
  count(x)
#&amp;gt; # A tibble: 2 x 2
#&amp;gt;       x     n
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1     1     3
#&amp;gt; 2     2     2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Expansion of groups for factors happens at each step of the grouping, so if we group
by &lt;code&gt;f1&lt;/code&gt; and &lt;code&gt;f2&lt;/code&gt; we get 9 groups,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% 
  count(f1, f2)
#&amp;gt; # A tibble: 9 x 3
#&amp;gt;   f1    f2        n
#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1 a     d         2
#&amp;gt; 2 a     e         1
#&amp;gt; 3 a     f         0
#&amp;gt; 4 b     d         0
#&amp;gt; 5 b     e         1
#&amp;gt; 6 b     f         1
#&amp;gt; 7 c     d         0
#&amp;gt; 8 c     e         0
#&amp;gt; 9 c     f         0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When factors and non factors are involved in the grouping, the number of
groups depends on the order. At each level of grouping, factors are always expanded
to one group per level, but non factors only create groups based on observed data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% 
  count(f1, x)
#&amp;gt; # A tibble: 3 x 3
#&amp;gt;   f1        x     n
#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1 a         1     3
#&amp;gt; 2 b         2     2
#&amp;gt; 3 c        NA     0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we group by &lt;code&gt;f1&lt;/code&gt; then &lt;code&gt;x&lt;/code&gt;. At the first layer, grouping on &lt;code&gt;f1&lt;/code&gt; creates
three groups. Each of these groups is then subdivided based on the values of the second
variable &lt;code&gt;x&lt;/code&gt;. Since &lt;code&gt;x&lt;/code&gt; is always 1 when &lt;code&gt;f1&lt;/code&gt; is &lt;code&gt;a&lt;/code&gt; the group is not
further divided.&lt;/p&gt;

&lt;p&gt;The last group, associated with the level &lt;code&gt;c&lt;/code&gt; of the factor &lt;code&gt;f1&lt;/code&gt; is empty, and
consequently has no values for the vector &lt;code&gt;x&lt;/code&gt;. In that case, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_by.html&#34;&gt;&lt;code&gt;group_by()&lt;/code&gt;&lt;/a&gt; uses
&lt;code&gt;NA&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% 
  count(x, f1)
#&amp;gt; # A tibble: 6 x 3
#&amp;gt;       x f1        n
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1     1 a         3
#&amp;gt; 2     1 b         0
#&amp;gt; 3     1 c         0
#&amp;gt; 4     2 a         0
#&amp;gt; 5     2 b         2
#&amp;gt; 6     2 c         0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we group by &lt;code&gt;x&lt;/code&gt; then &lt;code&gt;f1&lt;/code&gt; we initially split the data according to &lt;code&gt;x&lt;/code&gt; which
gives 2 groups. Each of these two groups is then further divided in 3 groups,
i.e. one for each level of &lt;code&gt;f1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;group-preservation&#34;&gt;Group preservation&lt;/h2&gt;

&lt;p&gt;The grouping structure is more coherently preserved by dplyr verbs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% 
  group_by(x, f1) %&amp;gt;% 
  summarise(y = mean(y))
#&amp;gt; # A tibble: 6 x 3
#&amp;gt; # Groups:   x [2]
#&amp;gt;       x f1        y
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1     1 a       2  
#&amp;gt; 2     1 b     NaN  
#&amp;gt; 3     1 c     NaN  
#&amp;gt; 4     2 a     NaN  
#&amp;gt; 5     2 b       4.5
#&amp;gt; 6     2 c     NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The expression &lt;code&gt;mean(y)&lt;/code&gt; is evaluated for the empty groups as well, and gives
consistent results with :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(numeric())
#&amp;gt; [1] NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In particular the result of &lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter.html&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; preserves the grouping structure of the input
data frame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% 
  group_by(x, f1) %&amp;gt;% 
  filter(y &amp;lt; 4)
#&amp;gt; # A tibble: 3 x 4
#&amp;gt; # Groups:   x, f1 [3]
#&amp;gt;   f1    f2        x     y
#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1 a     d         1     1
#&amp;gt; 2 a     e         1     2
#&amp;gt; 3 a     d         1     3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting tibble after the &lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter.html&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; call has six groups, the same
exact groups that were made by &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_by.html&#34;&gt;&lt;code&gt;group_by()&lt;/code&gt;&lt;/a&gt;. Previous versions of dplyr
would perform an implicit &lt;code&gt;group_by()&lt;/code&gt; after the filtering, potentially losing
groups.&lt;/p&gt;

&lt;p&gt;Because this is potentially disruptive, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter.html&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; has gained a &lt;code&gt;.preserve&lt;/code&gt; argument,
when &lt;code&gt;.preserve&lt;/code&gt; is &lt;code&gt;FALSE&lt;/code&gt; the data is first filtered and then regrouped:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df %&amp;gt;% 
  group_by(x, f1) %&amp;gt;% 
  filter(y &amp;lt; 5, .preserve = FALSE)
#&amp;gt; # A tibble: 4 x 4
#&amp;gt; # Groups:   x, f1 [6]
#&amp;gt;   f1    f2        x     y
#&amp;gt;   &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt; 1 a     d         1     1
#&amp;gt; 2 a     e         1     2
#&amp;gt; 3 a     d         1     3
#&amp;gt; 4 b     e         2     4
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;As opposed to what is described above, feedback from this post led us
 to change the default value of &lt;code&gt;.preserve&lt;/code&gt; to &lt;code&gt;FALSE&lt;/code&gt;, and update the
 algorithm to limit the cost of preserving.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note however, that even &lt;code&gt;.preserve = FALSE&lt;/code&gt; respects the factors that are used as
grouping variables, in particular &lt;code&gt;filter( , .preserve = FALSE)&lt;/code&gt; is not a way to
discard empty groups. The &lt;a href=&#34;https://forcats.tidyverse.org&#34;&gt;forcats&lt;/a&gt; 📦 may help:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris %&amp;gt;% 
  group_by(Species) %&amp;gt;% 
  filter(stringr::str_detect(Species, &amp;quot;^v&amp;quot;)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  group_by(Species = forcats::fct_drop(Species))
#&amp;gt; # A tibble: 100 x 5
#&amp;gt; # Groups:   Species [2]
#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species   
#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     
#&amp;gt;  1          7           3.2          4.7         1.4 versicolor
#&amp;gt;  2          6.4         3.2          4.5         1.5 versicolor
#&amp;gt;  3          6.9         3.1          4.9         1.5 versicolor
#&amp;gt;  4          5.5         2.3          4           1.3 versicolor
#&amp;gt;  5          6.5         2.8          4.6         1.5 versicolor
#&amp;gt;  6          5.7         2.8          4.5         1.3 versicolor
#&amp;gt;  7          6.3         3.3          4.7         1.6 versicolor
#&amp;gt;  8          4.9         2.4          3.3         1   versicolor
#&amp;gt;  9          6.6         2.9          4.6         1.3 versicolor
#&amp;gt; 10          5.2         2.7          3.9         1.4 versicolor
#&amp;gt; # … with 90 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Furthermore, the &lt;code&gt;group_trim()&lt;/code&gt; function has been added. &lt;code&gt;group_trim()&lt;/code&gt;
 recalculates the grouping metadata after dropping unused levels for
 all grouping variables that are factors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris %&amp;gt;% 
  group_by(Species) %&amp;gt;% 
  filter(stringr::str_detect(Species, &amp;quot;^v&amp;quot;)) %&amp;gt;% 
  group_trim()
#&amp;gt; # A tibble: 100 x 5
#&amp;gt; # Groups:   Species [2]
#&amp;gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   
#&amp;gt;          &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     
#&amp;gt; 1          7           3.2          4.7         1.4 versicolor
#&amp;gt; 2          6.4         3.2          4.5         1.5 versicolor
#&amp;gt; 3          6.9         3.1          4.9         1.5 versicolor
#&amp;gt; 4          5.5         2.3          4           1.3 versicolor
#&amp;gt; # … with 96 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;new-grouping-fuctions&#34;&gt;New grouping fuctions&lt;/h2&gt;

&lt;p&gt;The grouping family is extended with new functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_nest.html&#34;&gt;&lt;code&gt;group_nest()&lt;/code&gt;&lt;/a&gt; : similar to &lt;a href=&#34;https://tidyr.tidyverse.org/reference/nest.html&#34;&gt;&lt;code&gt;tidyr::nest()&lt;/code&gt;&lt;/a&gt; but focusing on the grouping columns
rather than the columns to nest&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_split.html&#34;&gt;&lt;code&gt;group_split()&lt;/code&gt;&lt;/a&gt; : similar to &lt;code&gt;base::split()&lt;/code&gt; but the grouping is subject to the data mask&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_keys.html&#34;&gt;&lt;code&gt;group_keys()&lt;/code&gt;&lt;/a&gt; : retrieves a tibble with one row per group and one column per grouping variable&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_rows.html&#34;&gt;&lt;code&gt;group_rows()&lt;/code&gt;&lt;/a&gt; : retrieves a list of 1-based integer vectors, each vector represents the indices
of the group in the grouped data frame&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The primary use case for these functions is with already grouped data frames, that may directly
or indirectly originate from &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_by.html&#34;&gt;&lt;code&gt;group_by()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data &amp;lt;- iris %&amp;gt;% 
  group_by(Species) %&amp;gt;% 
  filter(Sepal.Length &amp;gt; mean(Sepal.Length))

data %&amp;gt;% 
  group_nest()
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;   Species    data             
#&amp;gt;   &amp;lt;fct&amp;gt;      &amp;lt;list&amp;gt;           
#&amp;gt; 1 setosa     &amp;lt;tibble [22 × 4]&amp;gt;
#&amp;gt; 2 versicolor &amp;lt;tibble [24 × 4]&amp;gt;
#&amp;gt; 3 virginica  &amp;lt;tibble [22 × 4]&amp;gt;
data %&amp;gt;% 
  group_split()
#&amp;gt; [[1]]
#&amp;gt; # A tibble: 22 x 5
#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  
#&amp;gt;  1          5.1         3.5          1.4         0.2 setosa 
#&amp;gt;  2          5.4         3.9          1.7         0.4 setosa 
#&amp;gt;  3          5.4         3.7          1.5         0.2 setosa 
#&amp;gt;  4          5.8         4            1.2         0.2 setosa 
#&amp;gt;  5          5.7         4.4          1.5         0.4 setosa 
#&amp;gt;  6          5.4         3.9          1.3         0.4 setosa 
#&amp;gt;  7          5.1         3.5          1.4         0.3 setosa 
#&amp;gt;  8          5.7         3.8          1.7         0.3 setosa 
#&amp;gt;  9          5.1         3.8          1.5         0.3 setosa 
#&amp;gt; 10          5.4         3.4          1.7         0.2 setosa 
#&amp;gt; # … with 12 more rows
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; # A tibble: 24 x 5
#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species   
#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     
#&amp;gt;  1          7           3.2          4.7         1.4 versicolor
#&amp;gt;  2          6.4         3.2          4.5         1.5 versicolor
#&amp;gt;  3          6.9         3.1          4.9         1.5 versicolor
#&amp;gt;  4          6.5         2.8          4.6         1.5 versicolor
#&amp;gt;  5          6.3         3.3          4.7         1.6 versicolor
#&amp;gt;  6          6.6         2.9          4.6         1.3 versicolor
#&amp;gt;  7          6           2.2          4           1   versicolor
#&amp;gt;  8          6.1         2.9          4.7         1.4 versicolor
#&amp;gt;  9          6.7         3.1          4.4         1.4 versicolor
#&amp;gt; 10          6.2         2.2          4.5         1.5 versicolor
#&amp;gt; # … with 14 more rows
#&amp;gt; 
#&amp;gt; [[3]]
#&amp;gt; # A tibble: 22 x 5
#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species  
#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;    
#&amp;gt;  1          7.1         3            5.9         2.1 virginica
#&amp;gt;  2          7.6         3            6.6         2.1 virginica
#&amp;gt;  3          7.3         2.9          6.3         1.8 virginica
#&amp;gt;  4          6.7         2.5          5.8         1.8 virginica
#&amp;gt;  5          7.2         3.6          6.1         2.5 virginica
#&amp;gt;  6          6.8         3            5.5         2.1 virginica
#&amp;gt;  7          7.7         3.8          6.7         2.2 virginica
#&amp;gt;  8          7.7         2.6          6.9         2.3 virginica
#&amp;gt;  9          6.9         3.2          5.7         2.3 virginica
#&amp;gt; 10          7.7         2.8          6.7         2   virginica
#&amp;gt; # … with 12 more rows
data %&amp;gt;% 
  group_keys()
#&amp;gt; # A tibble: 3 x 1
#&amp;gt;   Species   
#&amp;gt;   &amp;lt;fct&amp;gt;     
#&amp;gt; 1 setosa    
#&amp;gt; 2 versicolor
#&amp;gt; 3 virginica
data %&amp;gt;% 
  group_rows()
#&amp;gt; [[1]]
#&amp;gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt;  [1] 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
#&amp;gt; [24] 46
#&amp;gt; 
#&amp;gt; [[3]]
#&amp;gt;  [1] 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, these functions may be used on an ungrouped data frame, together with a
grouping specification that is subject to the data mask. In that case, the grouping is
implicitly performed by &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_by.html&#34;&gt;&lt;code&gt;group_by()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris %&amp;gt;% 
  group_nest(Species)
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;   Species    data             
#&amp;gt;   &amp;lt;fct&amp;gt;      &amp;lt;list&amp;gt;           
#&amp;gt; 1 setosa     &amp;lt;tibble [50 × 4]&amp;gt;
#&amp;gt; 2 versicolor &amp;lt;tibble [50 × 4]&amp;gt;
#&amp;gt; 3 virginica  &amp;lt;tibble [50 × 4]&amp;gt;

iris %&amp;gt;% 
  group_split(Species)
#&amp;gt; [[1]]
#&amp;gt; # A tibble: 50 x 5
#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  
#&amp;gt;  1          5.1         3.5          1.4         0.2 setosa 
#&amp;gt;  2          4.9         3            1.4         0.2 setosa 
#&amp;gt;  3          4.7         3.2          1.3         0.2 setosa 
#&amp;gt;  4          4.6         3.1          1.5         0.2 setosa 
#&amp;gt;  5          5           3.6          1.4         0.2 setosa 
#&amp;gt;  6          5.4         3.9          1.7         0.4 setosa 
#&amp;gt;  7          4.6         3.4          1.4         0.3 setosa 
#&amp;gt;  8          5           3.4          1.5         0.2 setosa 
#&amp;gt;  9          4.4         2.9          1.4         0.2 setosa 
#&amp;gt; 10          4.9         3.1          1.5         0.1 setosa 
#&amp;gt; # … with 40 more rows
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; # A tibble: 50 x 5
#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species   
#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;     
#&amp;gt;  1          7           3.2          4.7         1.4 versicolor
#&amp;gt;  2          6.4         3.2          4.5         1.5 versicolor
#&amp;gt;  3          6.9         3.1          4.9         1.5 versicolor
#&amp;gt;  4          5.5         2.3          4           1.3 versicolor
#&amp;gt;  5          6.5         2.8          4.6         1.5 versicolor
#&amp;gt;  6          5.7         2.8          4.5         1.3 versicolor
#&amp;gt;  7          6.3         3.3          4.7         1.6 versicolor
#&amp;gt;  8          4.9         2.4          3.3         1   versicolor
#&amp;gt;  9          6.6         2.9          4.6         1.3 versicolor
#&amp;gt; 10          5.2         2.7          3.9         1.4 versicolor
#&amp;gt; # … with 40 more rows
#&amp;gt; 
#&amp;gt; [[3]]
#&amp;gt; # A tibble: 50 x 5
#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species  
#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;    
#&amp;gt;  1          6.3         3.3          6           2.5 virginica
#&amp;gt;  2          5.8         2.7          5.1         1.9 virginica
#&amp;gt;  3          7.1         3            5.9         2.1 virginica
#&amp;gt;  4          6.3         2.9          5.6         1.8 virginica
#&amp;gt;  5          6.5         3            5.8         2.2 virginica
#&amp;gt;  6          7.6         3            6.6         2.1 virginica
#&amp;gt;  7          4.9         2.5          4.5         1.7 virginica
#&amp;gt;  8          7.3         2.9          6.3         1.8 virginica
#&amp;gt;  9          6.7         2.5          5.8         1.8 virginica
#&amp;gt; 10          7.2         3.6          6.1         2.5 virginica
#&amp;gt; # … with 40 more rows

iris %&amp;gt;% 
  group_keys(Species)
#&amp;gt; # A tibble: 3 x 1
#&amp;gt;   Species   
#&amp;gt;   &amp;lt;fct&amp;gt;     
#&amp;gt; 1 setosa    
#&amp;gt; 2 versicolor
#&amp;gt; 3 virginica
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These functions are related to each other in how they handle and organize the
grouping information and who/what is responsible for maintaining the relation between the
data and the groups.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A grouped data frame, as generated by &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_by.html&#34;&gt;&lt;code&gt;group_by()&lt;/code&gt;&lt;/a&gt; stores the grouping information
as an attribute of the data frame, dplyr verbs use that information to maintain
the relationship&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When using &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_nest.html&#34;&gt;&lt;code&gt;group_nest()&lt;/code&gt;&lt;/a&gt; the data is structured as a data frame that has a list column
to hold the non grouping columns. The result of &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_nest.html&#34;&gt;&lt;code&gt;group_nest()&lt;/code&gt;&lt;/a&gt; is not a grouped data frame,
therefore the structure of the data frame maintains the relationship.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When using &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_split.html&#34;&gt;&lt;code&gt;group_split()&lt;/code&gt;&lt;/a&gt; the data is split into a list, and each element of the list
contains a tibble with the rows of the associated group. The user is responsible to
maintain the relationship, and may benefit from the assistance of the &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_keys.html&#34;&gt;&lt;code&gt;group_keys()&lt;/code&gt;&lt;/a&gt;
function, especially in the presence of empty groups.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;iterate-on-grouped-tibbles-by-group&#34;&gt;Iterate on grouped tibbles by group&lt;/h2&gt;

&lt;p&gt;The new &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_map.html&#34;&gt;&lt;code&gt;group_map()&lt;/code&gt;&lt;/a&gt; function provides a purrr style function that can be used to
iterate on grouped tibbles. Each conceptual group of the data frame is exposed to the
function with two pieces of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The subset of the data for the group, exposed as &lt;code&gt;.x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The key, a tibble with exactly one row and columns for each grouping variable,
exposed as &lt;code&gt;.y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;% 
  group_by(cyl) %&amp;gt;%
  group_map(~ head(.x, 2L))
#&amp;gt; # A tibble: 6 x 11
#&amp;gt; # Groups:   cyl [3]
#&amp;gt;     cyl   mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb
#&amp;gt; * &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1     4  22.8  108     93  3.85  2.32  18.6     1     1     4     1
#&amp;gt; 2     4  24.4  147.    62  3.69  3.19  20       1     0     4     2
#&amp;gt; 3     6  21    160    110  3.9   2.62  16.5     0     1     4     4
#&amp;gt; 4     6  21    160    110  3.9   2.88  17.0     0     1     4     4
#&amp;gt; 5     8  18.7  360    175  3.15  3.44  17.0     0     0     3     2
#&amp;gt; 6     8  14.3  360    245  3.21  3.57  15.8     0     0     3     4

mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  group_map(~ tibble(mod = list(lm(mpg ~ disp, data = .x))))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt; # Groups:   cyl [3]
#&amp;gt;     cyl mod     
#&amp;gt; * &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;  
#&amp;gt; 1     4 &amp;lt;S3: lm&amp;gt;
#&amp;gt; 2     6 &amp;lt;S3: lm&amp;gt;
#&amp;gt; 3     8 &amp;lt;S3: lm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lambda function must return a data frame. &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_map.html&#34;&gt;&lt;code&gt;group_map()&lt;/code&gt;&lt;/a&gt; row binds the data
frames, recycles the grouping columns and structures the result as a grouped tibble.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;group_walk()&lt;/code&gt; can be used when iterating on the groups is only desired for side effects.
 It applies the formula to each group, and then silently returns its input.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;changes-in-filter-and-slice&#34;&gt;Changes in filter and slice&lt;/h1&gt;

&lt;p&gt;Besides changes described previously related to preservation of the grouping structure,
&lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter.html&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/slice.html&#34;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt; now reorganize the data by groups for performance reasons:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(
  x = c(1, 2, 1, 2, 1), 
  y = c(1, 2, 3, 4, 5)
) %&amp;gt;% 
  group_by(x) %&amp;gt;% 
  filter(y &amp;lt; 5)
#&amp;gt; # A tibble: 4 x 2
#&amp;gt; # Groups:   x [2]
#&amp;gt;       x     y
#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1     1     1
#&amp;gt; 2     2     2
#&amp;gt; 3     1     3
#&amp;gt; 4     2     4
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;This has been reverted for &lt;code&gt;filter()&lt;/code&gt; due to popular demand. Calling &lt;code&gt;filter()&lt;/code&gt;
 on a grouped data frame leaves the rows in the original order.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;redesigned-hybrid-evaluation&#34;&gt;Redesigned hybrid evaluation&lt;/h1&gt;

&lt;h2 id=&#34;what-s-hybrid-evaluation-again&#34;&gt;What&amp;rsquo;s hybrid evaluation again ?&lt;/h2&gt;

&lt;p&gt;Hybrid evaluation is used in &lt;a href=&#34;https://dplyr.tidyverse.org/reference/summarise.html&#34;&gt;&lt;code&gt;summarise()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/mutate.html&#34;&gt;&lt;code&gt;mutate()&lt;/code&gt;&lt;/a&gt; to replace
potential expensive R operations by native C++ code that is group aware.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris %&amp;gt;% 
  group_by(Species) %&amp;gt;% 
  summarise(Petal.Length = mean(Petal.Length))
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;   Species    Petal.Length
#&amp;gt;   &amp;lt;fct&amp;gt;             &amp;lt;dbl&amp;gt;
#&amp;gt; 1 setosa             1.46
#&amp;gt; 2 versicolor         4.26
#&amp;gt; 3 virginica          5.55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example, the &lt;code&gt;base::mean()&lt;/code&gt; function is never called because the
hybrid alternative can directly calculate the mean for each group. Hybrid
evaluation typically gives better performance because it needs fewer memory
allocations.&lt;/p&gt;

&lt;p&gt;In this example, a standard evaluation path would need to:
 - create subsets of the &lt;code&gt;Petal.Length&lt;/code&gt; column for each group
 - call the &lt;code&gt;base::mean()&lt;/code&gt; function on each subset, which would also
   imply a cost for S3 dispatching to the right method
 - collect all results in a new vector&lt;/p&gt;

&lt;p&gt;In constrast, hybrid evaluation can directly allocate the final
vector, and calculate all 3 means without having to allocate the subsets.&lt;/p&gt;

&lt;h2 id=&#34;flaws-in-previous-version&#34;&gt;Flaws in previous version&lt;/h2&gt;

&lt;p&gt;Previous versions of hybrid evaluation relied on folding to
replace part of the expression by their hybrid result. For example,
there are hybrid versions of &lt;code&gt;sum()&lt;/code&gt; and &lt;code&gt;n()&lt;/code&gt;, so previous
versions attempted to use them for:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris %&amp;gt;% 
  group_by(Species) %&amp;gt;% 
  summarise(Petal.Length = sum(Petal.Length) / n())
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;   Species    Petal.Length
#&amp;gt;   &amp;lt;fct&amp;gt;             &amp;lt;dbl&amp;gt;
#&amp;gt; 1 setosa             1.46
#&amp;gt; 2 versicolor         4.26
#&amp;gt; 3 virginica          5.55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The gain of replacing parts of the expression with the result of the
hybrid versions was minimal, and the we had to rely on
brittle heuristics to try to respect standard R evaluation semantics.&lt;/p&gt;

&lt;h2 id=&#34;new-implementation&#34;&gt;New implementation&lt;/h2&gt;

&lt;p&gt;The new hybrid system is stricter and falls back to standard R evaluation
when the expression is not entirely recognized.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://dplyr.tidyverse.org/reference/hybrid_call.html&#34;&gt;&lt;code&gt;hybrid_call()&lt;/code&gt;&lt;/a&gt; function (subject to change) can be used to test if an expression
would be handled by hybrid or standard evaluation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris %&amp;gt;% hybrid_call(mean(Sepal.Length))
#&amp;gt; &amp;lt;hybrid evaluation&amp;gt;
#&amp;gt;   call      : base::mean(Sepal.Length)
#&amp;gt;   C++ class : dplyr::hybrid::internal::SimpleDispatchImpl&amp;lt;14, false, dplyr::NaturalDataFrame, dplyr::hybrid::internal::MeanImpl&amp;gt;
iris %&amp;gt;% hybrid_call(sum(Sepal.Length) / n())
#&amp;gt; &amp;lt;standard evaluation&amp;gt;
#&amp;gt;   call      : sum(Sepal.Length)/n()
iris %&amp;gt;% hybrid_call(+mean(Sepal.Length))
#&amp;gt; &amp;lt;standard evaluation&amp;gt;
#&amp;gt;   call      : +mean(Sepal.Length)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hybrid is very picky about what it can handle, for example &lt;code&gt;TRUE&lt;/code&gt; and &lt;code&gt;FALSE&lt;/code&gt;
are fine for &lt;code&gt;na.rm=&lt;/code&gt; because they are reserved words that can&amp;rsquo;t be replaced, but
&lt;code&gt;T&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt; or any expression that would resolve to a scalar logical are not:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris %&amp;gt;% hybrid_call(mean(Sepal.Length, na.rm = TRUE))
#&amp;gt; &amp;lt;hybrid evaluation&amp;gt;
#&amp;gt;   call      : base::mean(Sepal.Length, na.rm = TRUE)
#&amp;gt;   C++ class : dplyr::hybrid::internal::SimpleDispatchImpl&amp;lt;14, true, dplyr::NaturalDataFrame, dplyr::hybrid::internal::MeanImpl&amp;gt;
iris %&amp;gt;% hybrid_call(mean(Sepal.Length, na.rm = T))
#&amp;gt; &amp;lt;standard evaluation&amp;gt;
#&amp;gt;   call      : mean(Sepal.Length, na.rm = T)
iris %&amp;gt;% hybrid_call(mean(Sepal.Length, na.rm = 1 == 1))
#&amp;gt; &amp;lt;standard evaluation&amp;gt;
#&amp;gt;   call      : mean(Sepal.Length, na.rm = 1 == 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first step of the new hybrid system consists of studying the
expression and compare it to known expression patterns. If we find an exact
match, then we have all the information we need, and R is never called
to materialize the result.&lt;/p&gt;

&lt;p&gt;When there is no match, the expression gets evaluated for each group using R standard
evaluation rules in the data mask: a special environment that makes the
columns available and uses contextual information for functions such as &lt;a href=&#34;https://dplyr.tidyverse.org/reference/n.html&#34;&gt;&lt;code&gt;n()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/row_number.html&#34;&gt;&lt;code&gt;row_number()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris %&amp;gt;% 
  group_by(Species) %&amp;gt;% 
  summarise(Petal.Length = sum(Petal.Length) / n())
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;   Species    Petal.Length
#&amp;gt;   &amp;lt;fct&amp;gt;             &amp;lt;dbl&amp;gt;
#&amp;gt; 1 setosa             1.46
#&amp;gt; 2 versicolor         4.26
#&amp;gt; 3 virginica          5.55
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;performance&#34;&gt;Performance&lt;/h1&gt;

&lt;p&gt;When &lt;a href=&#34;https://dplyr.tidyverse.org/reference/summarise.html&#34;&gt;&lt;code&gt;summarise()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://dplyr.tidyverse.org/reference/mutate.html&#34;&gt;&lt;code&gt;mutate()&lt;/code&gt;&lt;/a&gt;  use expressions that cannot be handled by
hybrid evaluation, they call back to R from the C++ internals for each group.&lt;/p&gt;

&lt;p&gt;This is an expensive operation because the expressions have to be evaluated
with extra care. Traditionally it meant wrapping the expression in an R &lt;code&gt;tryCatch()&lt;/code&gt;
before evaluating, but R 3.5.0 has added unwind protection which we &lt;a href=&#34;https://github.com/RcppCore/Rcpp/pull/873&#34;&gt;exposed to
Rcpp&lt;/a&gt;. Consequently, the cost of evaluating an R expression carefully is lower
than before.&lt;/p&gt;

&lt;p&gt;We ran a benchmark calculating the means of 10,000 small groups with the
release version of dplyr and this release candidate with and without
using the unwind protect feature.&lt;/p&gt;

&lt;p&gt;Just using the &lt;code&gt;mean()&lt;/code&gt; function would not illustrate the feature, because dplyr would
use hybrid evaluation and never use callbacks to R. So instead we defined a &lt;code&gt;mean_&lt;/code&gt;
function that has the same body as &lt;code&gt;base::mean()&lt;/code&gt;. We also compare this to
the expression &lt;code&gt;sum(x) / n()&lt;/code&gt; because it woudld have been handled by
partial hybrid evaluation in previous versions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/articles/2018-12-dplyr-0-8-0_files/timings_summarise_mean.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is not a comprehensive benchmark analysis, but on this small example we can read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unwind protection has no impact when using the hybrid evaluation, this is not a surprise
because the hybrid path does not call back to R.&lt;/li&gt;
&lt;li&gt;hybrid evaluation performs better on the release candidate. This is a direct consequence of
the redesign of hybrid evaluation.&lt;/li&gt;
&lt;li&gt;unwind protection gives a performance boost &lt;code&gt;mean_()&lt;/code&gt;. Please note that the
x axis is on a log scale.&lt;/li&gt;
&lt;li&gt;unwind protection more than compensates for no longer using partial hybrid evaluation.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;nest-join&#34;&gt;nest_join&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://dplyr.tidyverse.org/reference/nest_join.html&#34;&gt;&lt;code&gt;nest_join()&lt;/code&gt;&lt;/a&gt; function is the newest addition to the join family.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;band_members %&amp;gt;% 
  nest_join(band_instruments)
#&amp;gt; Joining, by = &amp;quot;name&amp;quot;
#&amp;gt; # A tibble: 3 x 3
#&amp;gt;   name  band    band_instruments
#&amp;gt; * &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;list&amp;gt;          
#&amp;gt; 1 Mick  Stones  &amp;lt;tibble [0 × 1]&amp;gt;
#&amp;gt; 2 John  Beatles &amp;lt;tibble [1 × 1]&amp;gt;
#&amp;gt; 3 Paul  Beatles &amp;lt;tibble [1 × 1]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A nest join of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; returns all rows and all columns from &lt;code&gt;x&lt;/code&gt;, plus an additional column
that contains a list of tibbles. Each tibble contains all the rows from &lt;code&gt;y&lt;/code&gt; that match that row of &lt;code&gt;x&lt;/code&gt;.
When there is no match, the list column is a 0-row tibble with the same column names and types as &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/nest_join.html&#34;&gt;&lt;code&gt;nest_join()&lt;/code&gt;&lt;/a&gt; is the most fundamental join since you can recreate the other joins from it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/inner_join.html&#34;&gt;&lt;code&gt;inner_join()&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&#34;https://dplyr.tidyverse.org/reference/nest_join.html&#34;&gt;&lt;code&gt;nest_join()&lt;/code&gt;&lt;/a&gt; plus an &lt;a href=&#34;https://tidyr.tidyverse.org/reference/unnest.html&#34;&gt;&lt;code&gt;tidyr::unnest()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/left_join.html&#34;&gt;&lt;code&gt;left_join()&lt;/code&gt;&lt;/a&gt; is a  &lt;a href=&#34;https://dplyr.tidyverse.org/reference/nest_join.html&#34;&gt;&lt;code&gt;nest_join()&lt;/code&gt;&lt;/a&gt; plus an &lt;a href=&#34;https://tidyr.tidyverse.org/reference/unnest.html&#34;&gt;&lt;code&gt;tidyr::unnest()&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;drop=TRUE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/semi_join.html&#34;&gt;&lt;code&gt;semi_join()&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&#34;https://dplyr.tidyverse.org/reference/nest_join.html&#34;&gt;&lt;code&gt;nest_join()&lt;/code&gt;&lt;/a&gt; plus a &lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter.html&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; where you check that every element of data has at least one row.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/anti_join.html&#34;&gt;&lt;code&gt;anti_join()&lt;/code&gt;&lt;/a&gt; is a &lt;a href=&#34;https://dplyr.tidyverse.org/reference/nest_join.html&#34;&gt;&lt;code&gt;nest_join()&lt;/code&gt;&lt;/a&gt; plus a &lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter.html&#34;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; where you check every element has zero rows.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;scoped-variants&#34;&gt;Scoped variants&lt;/h1&gt;

&lt;p&gt;The scoped (or colwise) verbs are the set of verbs with &lt;code&gt;_at&lt;/code&gt;, &lt;code&gt;_if&lt;/code&gt; and &lt;code&gt;_all&lt;/code&gt; suffixes.
These verbs apply a certain behaviour (for instance, a mutating or summarising operation) to a given
selection of columns. This release of dplyr improves the consistency of the syntax and the behaviour with grouped tibbles.&lt;/p&gt;

&lt;h2 id=&#34;a-purrr-like-syntax-for-passing-functions&#34;&gt;A purrr-like syntax for passing functions&lt;/h2&gt;

&lt;p&gt;In dplyr 0.8.0, we have implemented support for functions and purrr-style lambda functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris &amp;lt;- as_tibble(iris) # For concise print method

mutate_if(iris, is.numeric, ~ . - mean(.))
#&amp;gt; # A tibble: 150 x 5
#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  
#&amp;gt;  1       -0.743      0.443         -2.36      -0.999 setosa 
#&amp;gt;  2       -0.943     -0.0573        -2.36      -0.999 setosa 
#&amp;gt;  3       -1.14       0.143         -2.46      -0.999 setosa 
#&amp;gt;  4       -1.24       0.0427        -2.26      -0.999 setosa 
#&amp;gt;  5       -0.843      0.543         -2.36      -0.999 setosa 
#&amp;gt;  6       -0.443      0.843         -2.06      -0.799 setosa 
#&amp;gt;  7       -1.24       0.343         -2.36      -0.899 setosa 
#&amp;gt;  8       -0.843      0.343         -2.26      -0.999 setosa 
#&amp;gt;  9       -1.44      -0.157         -2.36      -0.999 setosa 
#&amp;gt; 10       -0.943      0.0427        -2.26      -1.10  setosa 
#&amp;gt; # … with 140 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And lists of functions and purrr-style lambda functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fns &amp;lt;- list(
  centered = mean,                # Function object
  scaled = ~ . - mean(.) / sd(.)  # Purrr-style lambda
)
mutate_if(iris, is.numeric, fns)
#&amp;gt; # A tibble: 150 x 13
#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  
#&amp;gt;  1          5.1         3.5          1.4         0.2 setosa 
#&amp;gt;  2          4.9         3            1.4         0.2 setosa 
#&amp;gt;  3          4.7         3.2          1.3         0.2 setosa 
#&amp;gt;  4          4.6         3.1          1.5         0.2 setosa 
#&amp;gt;  5          5           3.6          1.4         0.2 setosa 
#&amp;gt;  6          5.4         3.9          1.7         0.4 setosa 
#&amp;gt;  7          4.6         3.4          1.4         0.3 setosa 
#&amp;gt;  8          5           3.4          1.5         0.2 setosa 
#&amp;gt;  9          4.4         2.9          1.4         0.2 setosa 
#&amp;gt; 10          4.9         3.1          1.5         0.1 setosa 
#&amp;gt; # … with 140 more rows, and 8 more variables: Sepal.Length_centered &amp;lt;dbl&amp;gt;,
#&amp;gt; #   Sepal.Width_centered &amp;lt;dbl&amp;gt;, Petal.Length_centered &amp;lt;dbl&amp;gt;,
#&amp;gt; #   Petal.Width_centered &amp;lt;dbl&amp;gt;, Sepal.Length_scaled &amp;lt;dbl&amp;gt;,
#&amp;gt; #   Sepal.Width_scaled &amp;lt;dbl&amp;gt;, Petal.Length_scaled &amp;lt;dbl&amp;gt;,
#&amp;gt; #   Petal.Width_scaled &amp;lt;dbl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is now the preferred syntax for passing functions to the scoped verbs because it is simpler and consistent with purrr.
Counting from dplyr 0.8.0, the hybrid evaluator recognises and inlines these lambdas, so that native implementation of
common algorithms will kick in just as it did with expressions passed with &lt;code&gt;funs()&lt;/code&gt;.
Consequently, we are soft-deprecating &lt;code&gt;funs()&lt;/code&gt;: it will continue to work without any warnings for now,
but will eventually start issuing warnings.&lt;/p&gt;

&lt;h2 id=&#34;behaviour-with-grouped-tibbles&#34;&gt;Behaviour with grouped tibbles&lt;/h2&gt;

&lt;p&gt;We have reviewed the documentation of all scoped variants to make clear how the scoped operations
are applied to grouped tibbles. For most of the scoped verbs, the operations also apply on
the grouping variables when they are part of the selection. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/arrange_all.html&#34;&gt;&lt;code&gt;arrange_all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/arrange_at.html&#34;&gt;&lt;code&gt;arrange_at()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/arrange_if.html&#34;&gt;&lt;code&gt;arrange_if()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/distinct_all.html&#34;&gt;&lt;code&gt;distinct_all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/distinct_at.html&#34;&gt;&lt;code&gt;distinct_at()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/distinct_if.html&#34;&gt;&lt;code&gt;distinct_if()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter_all.html&#34;&gt;&lt;code&gt;filter_all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter_at.html&#34;&gt;&lt;code&gt;filter_at()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/filter_if.html&#34;&gt;&lt;code&gt;filter_if()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_by_all.html&#34;&gt;&lt;code&gt;group_by_all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_by_at.html&#34;&gt;&lt;code&gt;group_by_at()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_by_if.html&#34;&gt;&lt;code&gt;group_by_if()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/reference/select_all.html&#34;&gt;&lt;code&gt;select_all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select_at.html&#34;&gt;&lt;code&gt;select_at()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select_if.html&#34;&gt;&lt;code&gt;select_if()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is not the case for summarising and mutating variants where operations are &lt;em&gt;not&lt;/em&gt; applied on grouping variables.
The behaviour depends on whether the selection is &lt;strong&gt;implicit&lt;/strong&gt; (&lt;code&gt;all&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt; selections) or &lt;strong&gt;explicit&lt;/strong&gt; (&lt;code&gt;at&lt;/code&gt; selections).
Grouping variables covered by explicit selections (with &lt;a href=&#34;https://dplyr.tidyverse.org/reference/summarise_at.html&#34;&gt;&lt;code&gt;summarise_at()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/mutate_at.html&#34;&gt;&lt;code&gt;mutate_at()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/transmute_at.html&#34;&gt;&lt;code&gt;transmute_at()&lt;/code&gt;&lt;/a&gt; are always an error.
For implicit selections, the grouping variables are always ignored. In this case, the level of verbosity depends on the kind of operation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Summarising operations (&lt;a href=&#34;https://dplyr.tidyverse.org/reference/summarise_all.html&#34;&gt;&lt;code&gt;summarise_all()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/summarise_if.html&#34;&gt;&lt;code&gt;summarise_if()&lt;/code&gt;&lt;/a&gt;
ignore grouping variables silently because it is obvious that
operations are not applied on grouping variables.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the other hand, it isn&amp;rsquo;t as obvious in the case of mutating operations (&lt;a href=&#34;https://dplyr.tidyverse.org/reference/mutate_all.html&#34;&gt;&lt;code&gt;mutate_all()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/mutate_if.html&#34;&gt;&lt;code&gt;mutate_if()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dplyr.tidyverse.org/reference/transmute_all.html&#34;&gt;&lt;code&gt;transmute_all()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dplyr.tidyverse.org/reference/transmute_if.html&#34;&gt;&lt;code&gt;transmute_if()&lt;/code&gt;&lt;/a&gt;).
For this reason, they issue a message indicating which grouping variables are ignored.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to make it easier to explicitly remove the grouping columns from an &lt;code&gt;_at&lt;/code&gt; selection, we have introduced a
new selection helper &lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_cols.html&#34;&gt;&lt;code&gt;group_cols()&lt;/code&gt;&lt;/a&gt;. Just like &lt;a href=&#34;https://dplyr.tidyverse.org/reference/last_col.html&#34;&gt;&lt;code&gt;last_col()&lt;/code&gt;&lt;/a&gt; matches the last column of a tibble,
&lt;a href=&#34;https://dplyr.tidyverse.org/reference/group_cols.html&#34;&gt;&lt;code&gt;group_cols()&lt;/code&gt;&lt;/a&gt; matches all grouping columns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  select(group_cols())
#&amp;gt; # A tibble: 32 x 1
#&amp;gt; # Groups:   cyl [3]
#&amp;gt;      cyl
#&amp;gt;  * &amp;lt;dbl&amp;gt;
#&amp;gt;  1     6
#&amp;gt;  2     6
#&amp;gt;  3     4
#&amp;gt;  4     6
#&amp;gt;  5     8
#&amp;gt;  6     6
#&amp;gt;  7     8
#&amp;gt;  8     4
#&amp;gt;  9     4
#&amp;gt; 10     6
#&amp;gt; # … with 22 more rows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This new helper is mostly intended for selection in scoped variants:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  mutate_at(
    vars(starts_with(&amp;quot;c&amp;quot;)),
    ~ . - mean(.)
  )
#&amp;gt; Error: Column `cyl` can&#39;t be modified because it&#39;s a grouping variable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It makes it easy to remove explicitly the grouping variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars %&amp;gt;%
  group_by(cyl) %&amp;gt;%
  mutate_at(
    vars(starts_with(&amp;quot;c&amp;quot;), -group_cols()),
    ~ . - mean(.)
  )
#&amp;gt; # A tibble: 32 x 11
#&amp;gt; # Groups:   cyl [3]
#&amp;gt;      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear   carb
#&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt;  1  21       6  160    110  3.9   2.62  16.5     0     1     4  0.571
#&amp;gt;  2  21       6  160    110  3.9   2.88  17.0     0     1     4  0.571
#&amp;gt;  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4 -0.545
#&amp;gt;  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3 -2.43 
#&amp;gt;  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3 -1.5  
#&amp;gt;  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3 -2.43 
#&amp;gt;  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3  0.5  
#&amp;gt;  8  24.4     4  147.    62  3.69  3.19  20       1     0     4  0.455
#&amp;gt;  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4  0.455
#&amp;gt; 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4  0.571
#&amp;gt; # … with 22 more rows
&lt;/code&gt;&lt;/pre&gt;
</description>
  </item>
  
</channel>
  </rss>
